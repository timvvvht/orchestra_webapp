import { useAuth } from "@/auth/AuthContext";
import { GoogleLoginButton } from "@/auth/GoogleLoginButton";
import { useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState, useCallback, useMemo, useRef } from "react";
import { supabase } from "@/auth/SupabaseClient";
import { acsGithubApi } from "@/services/acsGitHubApi";
import SnakeGame from "@/components/demo/SnakeGame";

// Grid pattern helper
const makeGridPattern = (size = 60, opacity = 0.05) =>
  `data:image/svg+xml,%3Csvg width='${size}' height='${size}' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' stroke='white' stroke-width='0.5' opacity='${opacity}'%3E%3Cpath d='M0 0h${size}v${size}H0z'/%3E%3C/g%3E%3C/svg%3E`;

// Grid patterns
const grid40Pattern = makeGridPattern(40, 0.05);

export default function Landing() {
  return <PlaygroundLanding />;
}

// Playground Landing Page - Refined and Polished
function PlaygroundLanding() {
  const location = useLocation();
  const navigate = useNavigate();
  const params = new URLSearchParams(location.search);
  const authFailed = params.get("error") === "auth_failed";
  const [userInput, setUserInput] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPreview, setGeneratedPreview] = useState<any>(null);
  const [selectedExample, setSelectedExample] = useState<number | null>(null);
  
  // Streaming and play mode states
  const [streaming, setStreaming] = useState(false);
  const [streamedCode, setStreamedCode] = useState("");
  const [playMode, setPlayMode] = useState(false);
  
  // Authentication modal state
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authModalContext, setAuthModalContext] = useState<string>("");
  

  
  // Typewriter effect states
  const [currentPlaceholder, setCurrentPlaceholder] = useState("");
  const [placeholderIndex, setPlaceholderIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(true);
  
  // Refs for auto-scrolling
  const streamingContainerRef = useRef<HTMLDivElement>(null);
  const rAFRef = useRef<number | null>(null);
  const pendingRef = useRef(false);
  
  // Auto-follow state for pinning to bottom
  const [autoFollow, setAutoFollow] = useState(true);
  
  // GitHub connection state
  const [showGitHubConnect, setShowGitHubConnect] = useState(false);
  const [githubConnecting, setGithubConnecting] = useState(false);
  
  // Auth context
  const { isAuthenticated, loginGoogle } = useAuth();
  
  // ACS client for GitHub operations
  const DEFAULT_ACS = (import.meta.env?.VITE_ACS_BASE_URL || "https://orchestra-acs.fly.dev").replace(/\/$/, "");
  const [acsBase] = useState(DEFAULT_ACS);
  const api = useMemo(() => acsGithubApi({ baseUrl: acsBase }), [acsBase]);

  // GitHub connection handler
  const onConnectGitHub = useCallback(async () => {
    setGithubConnecting(true);
    try {
      const { data: { session } } = await supabase.auth.getSession();
      const auth = session?.access_token ? `Bearer ${session.access_token}` : undefined;
      const res = await api.installUrl(auth);
      if (!res.ok) {
        console.error("Failed to get GitHub install URL:", res.data?.detail);
        return;
      }
      window.open(res.data.install_url, "_blank", "noopener,noreferrer");
    } catch (e: any) {
      console.error("Failed to start GitHub install:", e?.message);
    } finally {
      setGithubConnecting(false);
    }
  }, [api]);

  // Default snake code for streaming preview
  const defaultSnakeCode = `// Snake Game - Generated by Orchestra AI
class SnakeGame {
  constructor(canvas) {
    this.canvas = canvas;
    this.ctx = canvas.getContext('2d');
    this.gridSize = 20;
    this.snake = [{ x: 10, y: 10 }];
    this.food = { x: 15, y: 15 };
    this.direction = { x: 1, y: 0 };
    this.score = 0;
    this.gameRunning = false;
    
    this.bindEvents();
    this.generateFood();
  }
  
  bindEvents() {
    document.addEventListener('keydown', (e) => {
      switch(e.key) {
        case 'ArrowUp':
          if (this.direction.y !== 1) {
            this.direction = { x: 0, y: -1 };
          }
          break;
        case 'ArrowDown':
          if (this.direction.y !== -1) {
            this.direction = { x: 0, y: 1 };
          }
          break;
        case 'ArrowLeft':
          if (this.direction.x !== 1) {
            this.direction = { x: -1, y: 0 };
          }
          break;
        case 'ArrowRight':
          if (this.direction.x !== -1) {
            this.direction = { x: 1, y: 0 };
          }
          break;
      }
    });
  }
  
  generateFood() {
    this.food = {
      x: Math.floor(Math.random() * (this.canvas.width / this.gridSize)),
      y: Math.floor(Math.random() * (this.canvas.height / this.gridSize))
    };
  }
  
  update() {
    const head = { ...this.snake[0] };
    head.x += this.direction.x;
    head.y += this.direction.y;
    
    // Check wall collision
    if (head.x < 0 || head.x >= this.canvas.width / this.gridSize ||
        head.y < 0 || head.y >= this.canvas.height / this.gridSize) {
      this.gameOver();
      return;
    }
    
    // Check self collision
    if (this.snake.some(segment => segment.x === head.x && segment.y === head.y)) {
      this.gameOver();
      return;
    }
    
    this.snake.unshift(head);
    
    // Check food collision
    if (head.x === this.food.x && head.y === this.food.y) {
      this.score += 10;
      this.generateFood();
    } else {
      this.snake.pop();
    }
  }
  
  draw() {
    // Clear canvas
    this.ctx.fillStyle = '#000';
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Draw snake
    this.ctx.fillStyle = '#0f0';
    this.snake.forEach(segment => {
      this.ctx.fillRect(
        segment.x * this.gridSize,
        segment.y * this.gridSize,
        this.gridSize - 2,
        this.gridSize - 2
      );
    });
    
    // Draw food
    this.ctx.fillStyle = '#f00';
    this.ctx.fillRect(
      this.food.x * this.gridSize,
      this.food.y * this.gridSize,
      this.gridSize - 2,
      this.gridSize - 2
    );
  }
  
  gameLoop() {
    if (!this.gameRunning) return;
    
    this.update();
    this.draw();
    
    setTimeout(() => this.gameLoop(), 150);
  }
  
  start() {
    this.gameRunning = true;
    this.gameLoop();
  }
  
  gameOver() {
    this.gameRunning = false;
    alert(\`Game Over! Score: \${this.score}\`);
  }
}

// Initialize game
const canvas = document.getElementById('gameCanvas');
const game = new SnakeGame(canvas);
game.start();`;

  // Streaming code simulation
  const startStreamingExample = useCallback((index: number) => {
    // No authentication required for examples - all are accessible without login
    
    setSelectedExample(index);
    setStreaming(true);
    setStreamedCode("");
    setPlayMode(false);
    setGeneratedPreview(null);

    const code = examples[index]?.title === "Snake Game" ? defaultSnakeCode : 
      `// ${examples[index]?.title} - Generated by Orchestra AI\n// Interactive example coming soon...`;
    
    const durationMs = 3000;
    const steps = Math.max(60, Math.min(code.length, 240));
    const chunkSize = Math.ceil(code.length / steps);
    let i = 0;
    
    const timer = setInterval(() => {
      if (i >= code.length) {
        clearInterval(timer);
        setStreaming(false);
        if (examples[index]?.title === "Snake Game") {
          setPlayMode(true);
        }
        return;
      }
      setStreamedCode(prev => prev + code.slice(i, i + chunkSize));
      i += chunkSize;
    }, durationMs / steps);
  }, [defaultSnakeCode]);

  // GitHub connect with login gate
  const onConnectGitHubEntry = useCallback(async () => {
    if (!isAuthenticated) {
      // Store intent to connect GitHub after login
      sessionStorage.setItem('postLoginAction', 'connect_github');
      setAuthModalContext("github");
      setShowAuthModal(true);
      return;
    }
    await onConnectGitHub();
  }, [isAuthenticated, onConnectGitHub]);

  // Placeholder options for typewriter effect
  const placeholderOptions = useMemo(() => [
    "A task management app that feels like Notion but works like Linear...",
    "A social media dashboard with real-time analytics and dark mode...",
    "An e-commerce store with AI-powered product recommendations...",
    "A collaborative whiteboard tool with video chat integration...",
    "A personal finance tracker with automated expense categorization...",
    "A recipe sharing platform with meal planning features...",
    "A fitness app with custom workout plans and progress tracking...",
    "A music streaming service with AI-curated playlists..."
  ], []);

  // Typewriter effect for placeholders
  useEffect(() => {
    if (userInput.length > 0) return; // Don't show placeholder when user is typing

    let timeout: NodeJS.Timeout;
    const currentText = placeholderOptions[placeholderIndex];
    
    if (isTyping) {
      // Typing phase
      if (currentPlaceholder.length < currentText.length) {
        timeout = setTimeout(() => {
          setCurrentPlaceholder(currentText.slice(0, currentPlaceholder.length + 1));
        }, 5 + Math.random() * 20); // Variable typing speed for natural feel
      } else {
        // Pause at end before backspacing
        timeout = setTimeout(() => {
          setIsTyping(false);
        }, 2000);
      }
    } else {
      // Backspacing phase
      if (currentPlaceholder.length > 0) {
        timeout = setTimeout(() => {
          setCurrentPlaceholder(currentPlaceholder.slice(0, -1));
        }, 30);
      } else {
        // Move to next placeholder
        timeout = setTimeout(() => {
          setPlaceholderIndex((prev) => (prev + 1) % placeholderOptions.length);
          setIsTyping(true);
        }, 500);
      }
    }

    return () => clearTimeout(timeout);
  }, [currentPlaceholder, placeholderIndex, isTyping, userInput.length, placeholderOptions]);

  // Detect if user is near bottom for auto-follow
  useEffect(() => {
    const c = streamingContainerRef.current;
    if (!c) return;
    
    const onScroll = () => {
      const nearBottom = c.scrollHeight - c.scrollTop - c.clientHeight < 16;
      setAutoFollow(nearBottom);
    };
    
    c.addEventListener('scroll', onScroll);
    return () => c.removeEventListener('scroll', onScroll);
  }, []);

  // Pin to bottom while streaming (instant snap, no smooth)
  useEffect(() => {
    if (!streaming || !autoFollow || !streamingContainerRef.current) return;
    
    pendingRef.current = true;
    
    if (rAFRef.current == null) {
      rAFRef.current = requestAnimationFrame(() => {
        rAFRef.current = null;
        if (pendingRef.current && streamingContainerRef.current) {
          pendingRef.current = false;
          const c = streamingContainerRef.current;
          // Instant snap to bottom - true pin behavior
          c.scrollTop = c.scrollHeight;
        }
      });
    }
  }, [streamedCode, streaming, autoFollow]);

  // Cleanup rAF on unmount
  useEffect(() => {
    return () => {
      if (rAFRef.current) {
        cancelAnimationFrame(rAFRef.current);
      }
    };
  }, []);

  // Auto-close modal when user authenticates
  useEffect(() => {
    if (isAuthenticated && showAuthModal) {
      setShowAuthModal(false);
    }
  }, [isAuthenticated, showAuthModal]);

  // Handle escape key to close modal
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && showAuthModal) {
        setShowAuthModal(false);
      }
    };
    
    if (showAuthModal) {
      document.addEventListener('keydown', handleEscape);
      return () => document.removeEventListener('keydown', handleEscape);
    }
  }, [showAuthModal]);

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (showAuthModal) {
      document.body.style.overflow = 'hidden';
      return () => {
        document.body.style.overflow = 'unset';
      };
    }
  }, [showAuthModal]);

  // Handle post-login actions from sessionStorage
  useEffect(() => {
    if (isAuthenticated) {
      const postLoginAction = sessionStorage.getItem('postLoginAction');
      if (postLoginAction === 'connect_github') {
        sessionStorage.removeItem('postLoginAction');
        onConnectGitHub();
      }
    }
  }, [isAuthenticated, onConnectGitHub]);

  const examples = [
    {
      icon: "🎮",
      title: "Snake Game",
      prompt: "Create a classic snake game with score tracking",
      preview: {
        type: "game",
        description: "Fully playable retro snake game",
        features: ["Arrow key controls", "Score system", "Increasing difficulty"]
      }
    },
    {
      icon: "📝",
      title: "Note Taking App",
      prompt: "Build a markdown note-taking app with folders",
      preview: {
        type: "app",
        description: "Clean, minimal note-taking interface",
        features: ["Markdown support", "Folder organization", "Search"]
      }
    },
    {
      icon: "🎨",
      title: "Portfolio Site",
      prompt: "Design a modern portfolio website for a photographer",
      preview: {
        type: "website",
        description: "Stunning visual portfolio",
        features: ["Image galleries", "Contact form", "Responsive design"]
      }
    },
    {
      icon: "💬",
      title: "Chat Interface",
      prompt: "Create a real-time chat application",
      preview: {
        type: "app",
        description: "Modern messaging interface",
        features: ["Real-time messages", "User presence", "Emoji support"]
      }
    }
  ];

  const handleGenerate = () => {
    // Check authentication first
    if (!isAuthenticated) {
      setAuthModalContext("generate");
      setShowAuthModal(true);
      return;
    }
    
    setIsGenerating(true);
    // Simulate generation
    setTimeout(() => {
      setIsGenerating(false);
      setGeneratedPreview({
        success: true,
        message: "Your app is ready! Sign in to deploy it live."
      });
    }, 3000);
  };

  const handleTextareaFocus = () => {
    // Check authentication on focus
    if (!isAuthenticated) {
      setAuthModalContext("input");
      setShowAuthModal(true);
      return;
    }
  };

  const handleTextareaClick = () => {
    // Check authentication on click
    if (!isAuthenticated) {
      setAuthModalContext("input");
      setShowAuthModal(true);
      return;
    }
  };

  return (
    <main className="min-h-screen relative overflow-hidden bg-black">
      {/* Interactive background */}
      <div className="fixed inset-0">
        <div className="absolute inset-0 bg-gradient-to-br from-slate-950 via-black to-slate-950" />
      

        {/* Floating orbs */}
        <div className="absolute top-0 left-1/4 w-96 h-96 bg-blue-500/5 rounded-full blur-3xl animate-[float_30s_ease-in-out_infinite]" />
        <div className="absolute bottom-0 right-1/4 w-96 h-96 bg-purple-500/5 rounded-full blur-3xl animate-[float_35s_ease-in-out_infinite_reverse]" />

        {/* Grid overlay */}
        <div className={`absolute inset-0 bg-[url('${grid40Pattern}')]`} />
      </div>

      {/* Content */}
      <div className="relative z-10">
        {/* Header */}
        <header className="absolute top-0 left-0 right-0 p-6 md:p-8">
          <div className="max-w-7xl mx-auto flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-purple-500/20 to-blue-500/20 backdrop-blur-xl border border-white/10 flex items-center justify-center hover:rotate-12 transition-transform duration-300">
                <svg className="w-5 h-5 text-white/80" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z" />
                </svg>
              </div>
              <span className="text-xl font-light text-white/90">Orchestra</span>
            </div>

            {/* Quick stats ticker */}
            <div className="hidden md:flex items-center gap-2 px-4 py-2 rounded-full bg-white/[0.03] border border-white/10">
              <div className="w-2 h-2 rounded-full bg-green-400 animate-pulse" />
              <span className="text-xs text-white/60">
                <span className="text-white/80 font-medium">247</span> apps being built right now
              </span>
            </div>
          </div>
        </header>

        {/* Main playground */}
        <div className="min-h-screen flex flex-col items-center justify-center px-6 pt-24 pb-12">
          <div className="w-full max-w-6xl">
            {/* Hero */}
            <div className="text-center mb-12">
              <h1 className="text-5xl md:text-7xl font-extralight text-white mb-6">
                <span className="block">Imagine It.</span>
                <span className="block bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent">
                  We'll Build It.
                </span>
              </h1>
              <p className="text-xl text-white/60 max-w-2xl mx-auto">
                Describe any app, website, or tool. Our AI agents will create it instantly.
                No coding required. Try it right here, right now.
              </p>
            </div>

            {/* Interactive playground */}
            <div className="grid lg:grid-cols-2 gap-8 mb-12">
              {/* Input side */}
              <div className="space-y-6">
                {/* Text input */}
                <div className="w-full">
                  {/* Floating label style */}
                  <div className="relative">

                    <div className="relative group">
                      {/* Aurora border effect */}
                      <div className="absolute -inset-[1px] bg-gradient-to-r from-purple-600 via-blue-600 to-purple-600 rounded-2xl opacity-50 blur-sm group-hover:opacity-70 transition-opacity animate-gradient" />
                      
                      <div className="relative bg-black border border-white/10 rounded-2xl p-6">
                        <div className="relative" onClick={handleTextareaClick}>
                          <textarea
                            value={userInput}
                            onChange={(e) => setUserInput(e.target.value)}
                            onFocus={handleTextareaFocus}
                            onClick={handleTextareaClick}
                            className="w-full h-28 bg-transparent text-white resize-none focus:outline-none"
                          />
                          {/* Typewriter placeholder overlay */}
                          {userInput.length === 0 && (
                            <div className="absolute inset-0 pointer-events-none flex items-start">
                              <div className="text-white/30 whitespace-pre-wrap break-words leading-relaxed">
                                {currentPlaceholder}
                                <span className="text-white/50 animate-[caret-blink_1s_infinite]">|</span>
                              </div>
                            </div>
                          )}
                        </div>
                        
                        {/* Bottom action bar */}
                        <div className="flex items-center justify-between mt-4 pt-4 border-t border-white/5">
                          <button
                            onClick={onConnectGitHubEntry}
                            className="text-sm text-white/50 hover:text-white/80 transition-colors cursor-pointer"
                          >
                            <span className="flex items-center gap-2">
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                              </svg>
                              Import from GitHub
                            </span>
                          </button>
                          
                          <button
                            onClick={handleGenerate}
                            disabled={!userInput || isGenerating}
                            className="px-5 py-2 bg-white text-black rounded-lg font-semibold hover:bg-white/90 transition-all cursor-pointer disabled:opacity-30"
                          >
                            {isGenerating ? (
                              <span className="flex items-center gap-2">
                                <div className="w-4 h-4 border-2 border-black/30 border-t-black rounded-full animate-spin" />
                                Generating...
                              </span>
                            ) : (
                              "Generate →"
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Example prompts */}
                <div className="space-y-3">
                  <div className="text-xs text-white/40 uppercase tracking-wide">Or try an example:</div>
                  <div className="grid grid-cols-2 gap-3">
                    {examples.map((example, index) => (
                      <button
                        key={index}
                        onClick={() => {
                          setUserInput(example.prompt);
                          startStreamingExample(index);
                        }}
                        className="p-4 bg-white/[0.03] hover:bg-white/[0.05] border border-white/10 rounded-xl text-left transition-all hover:scale-[1.02] active:scale-[0.98] cursor-pointer"
                      >
                        <div className="flex items-center gap-3">
                          <span className="text-2xl">{example.icon}</span>
                          <div>
                            <div className="text-sm text-white/80 font-medium">{example.title}</div>
                            <div className="text-xs text-white/40">Click to try</div>
                          </div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              {/* Preview side */}
              <div className="relative">
                <div className="sticky top-8">
                  <div className="rounded-2xl bg-white/[0.03] backdrop-blur-xl border border-white/10 overflow-hidden">
                    {/* Browser chrome */}
                    <div className="flex items-center gap-2 px-4 py-3 border-b border-white/10">
                      <div className="flex items-center gap-1.5">
                        <div className="w-3 h-3 rounded-full bg-red-500/50" />
                        <div className="w-3 h-3 rounded-full bg-yellow-500/50" />
                        <div className="w-3 h-3 rounded-full bg-green-500/50" />
                      </div>
                      <div className="flex-1 flex justify-center">
                        <div className="px-3 py-1 bg-white/[0.03] rounded text-xs text-white/40">
                          your-app.orchestra.dev
                        </div>
                      </div>
                    </div>

                    {/* Preview content */}
                    <div className="h-96 flex items-center justify-center p-8">
                      {streaming ? (
                        <div ref={streamingContainerRef} className="w-full h-full overflow-auto">
                          <div className="flex items-center justify-between px-4 py-2 border-b border-white/10 text-white/60 text-xs">
                            <span>Generating example code…</span>
                            <div className="flex items-center gap-1">
                              <div className="w-1.5 h-1.5 rounded-full bg-white/50 animate-pulse" />
                              <div className="w-1.5 h-1.5 rounded-full bg-white/40 animate-pulse" style={{ animationDelay: '100ms' }} />
                              <div className="w-1.5 h-1.5 rounded-full bg-white/30 animate-pulse" style={{ animationDelay: '200ms' }} />
                            </div>
                          </div>
                          <pre className="p-4 text-xs text-white/80 font-mono whitespace-pre-wrap">{streamedCode}</pre>
                        </div>
                      ) : playMode ? (
                        selectedExample !== null && examples[selectedExample].title === "Snake Game" ? (
                          <SnakeGame />
                        ) : (
                          <div className="text-center text-white/60">
                            <div className="text-lg mb-2">Interactive Preview</div>
                            <p className="text-sm">More playable examples coming soon!</p>
                          </div>
                        )
                      ) : isGenerating ? (
                        <div className="text-center">
                          <div className="mb-4">
                            <div className="w-16 h-16 mx-auto border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin" />
                          </div>
                          <p className="text-white/60">AI agents are building your app...</p>
                          <p className="text-xs text-white/40 mt-2">This usually takes 5-10 seconds</p>
                        </div>
                      ) : generatedPreview ? (
                        <div className="text-center animate-fade-in">
                          <div className="w-20 h-20 mx-auto mb-4 rounded-2xl bg-gradient-to-br from-green-500/20 to-emerald-500/20 flex items-center justify-center">
                            <svg className="w-10 h-10 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </div>
                          <h3 className="text-xl text-white mb-2">App Generated!</h3>
                          <p className="text-white/60 mb-6">{generatedPreview.message}</p>
                          
                          {/* Action buttons */}
                          <div className="space-y-3">
                            <GoogleLoginButton className="mx-auto" />
                            
                            {/* Connect GitHub option */}
                            <div className="flex items-center justify-center gap-2 text-sm text-white/50">
                              <span>or</span>
                              <button
                                onClick={onConnectGitHub}
                                disabled={githubConnecting}
                                className="text-blue-400 hover:text-blue-300 underline underline-offset-2 transition-colors disabled:opacity-50 cursor-pointer"
                              >
                                {githubConnecting ? "Connecting..." : "Connect GitHub repo"}
                              </button>
                            </div>
                          </div>
                        </div>
                      ) : selectedExample !== null ? (
                        <div className="space-y-4">
                          <div className="text-center">
                            <span className="text-5xl mb-4 block">{examples[selectedExample].icon}</span>
                            <h3 className="text-xl text-white mb-2">{examples[selectedExample].title}</h3>
                            <p className="text-sm text-white/60">{examples[selectedExample].preview.description}</p>
                          </div>
                          <div className="space-y-2">
                            {examples[selectedExample].preview.features.map((feature, i) => (
                              <div key={i} className="flex items-center gap-2 text-sm text-white/40">
                                <svg className="w-4 h-4 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                                {feature}
                              </div>
                            ))}
                          </div>
                        </div>
                      ) : (
                        <div className="text-center text-white/40">
                          <svg className="w-16 h-16 mx-auto mb-4 text-white/20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                          </svg>
                          <p>Your app preview will appear here</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Error state */}
            {authFailed && (
              <div className="mb-8 p-4 rounded-xl bg-red-500/10 border border-red-500/20 backdrop-blur-sm max-w-md mx-auto">
                <p className="text-sm text-red-200 text-center">
                  Something went wrong. Let's try again.
                </p>
              </div>
            )}

            {/* CTA Section - Connect GitHub */}
            {/* <div className="text-center mb-8">
              <div className="inline-flex items-center gap-4 px-6 py-3 bg-white/[0.03] backdrop-blur-xl border border-white/10 rounded-xl">
                <div className="flex items-center gap-2">
                  <svg className="w-5 h-5 text-white/60" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                  </svg>
                  <span className="text-white/70">Ready to build with your own code?</span>
                </div>
                
                <button
                  onClick={onConnectGitHub}
                  disabled={githubConnecting}
                  className="group relative px-4 py-2 bg-white text-black rounded-lg font-medium transition-all duration-300 hover:scale-105 active:scale-100 disabled:opacity-50 cursor-pointer"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 to-purple-400/20 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity" />
                  <span className="relative z-10">
                    {githubConnecting ? "Connecting..." : "Connect GitHub"}
                  </span>
                </button>
              </div>
            </div> */}

            {/* Trust signals */}
            <div className="flex flex-wrap items-center justify-center gap-8 text-white/40 text-sm">
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>No coding required</span>
              </div>
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z" />
                </svg>
                <span>Learn as you build</span>
              </div>
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                </svg>
                <span>Deploy instantly</span>
              </div>
              <div className="flex items-center gap-2">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z" />
                </svg>
                <span>Join 10,000+ builders</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Authentication Modal - Simplified */}
      {showAuthModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Clean backdrop */}
          <div 
            className="absolute inset-0 bg-black/70 backdrop-blur-sm"
            onClick={() => setShowAuthModal(false)}
          />
          
          {/* Modal */}
          <div className="relative w-full max-w-sm mx-6">
            {/* Glass container */}
            <div className="relative bg-white/[0.03] backdrop-blur-xl border border-white/10 rounded-2xl overflow-hidden">
              {/* Subtle gradient overlay */}
              <div className="absolute inset-0 bg-gradient-to-br from-white/[0.01] to-transparent pointer-events-none" />
              
              {/* Content */}
              <div className="relative z-10 p-8">
                {/* Close button */}
                <button
                  onClick={() => setShowAuthModal(false)}
                  className="absolute top-4 right-4 p-2 rounded-full hover:bg-white/[0.05] transition-colors cursor-pointer"
                  aria-label="Close"
                >
                  <svg className="w-4 h-4 text-white/40 hover:text-white/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
                
                {/* Orchestra icon */}
                <div className="w-12 h-12 mx-auto mb-8 rounded-xl bg-white/[0.05] border border-white/10 flex items-center justify-center">
                  <svg className="w-6 h-6 text-white/80" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z" />
                  </svg>
                </div>
                
                {/* Content */}
                <div className="text-center space-y-6">
                  {/* Heading */}
                  <div className="space-y-2">
                    <h2 className="text-xl font-light text-white/90">
                      {authModalContext === "generate" ? "Sign in to generate" :
                       authModalContext === "input" ? "Sign in to continue" :
                       authModalContext === "github" ? "Sign in to connect" :
                       authModalContext.startsWith("example-") ? "Sign in to try example" :
                       "Sign in to Orchestra"}
                    </h2>
                    
                    <p className="text-sm text-white/60 leading-relaxed">
                      {authModalContext === "generate" ? "Create and deploy your app instantly." :
                       authModalContext === "input" ? "Start building with AI assistance." :
                       authModalContext === "github" ? "Connect your repositories to Orchestra." :
                       authModalContext.startsWith("example-") ? `Explore the ${authModalContext.replace('example-', '')} demo.` :
                       "Build apps with AI. Deploy instantly."}
                    </p>
                  </div>
                  
                  {/* Login button */}
                  <GoogleLoginButton 
                    variant="default"
                    className="w-full"
                  />
                  
                  {/* Alternative */}
                  <div className="text-xs text-white/30">
                    <button 
                      className="hover:text-white/50 transition-colors cursor-pointer"
                      onClick={() => setShowAuthModal(false)}
                    >
                      Continue without signing in
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Minimal Animation Styles */}
      <style jsx>{`
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
      `}</style>
    </main>
  );
}