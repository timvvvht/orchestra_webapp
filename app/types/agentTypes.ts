// src/types/agentTypes.ts
// Canonical type definitions for Agent Configuration domain/UI.

// Usage statistics for the agent
export interface AgentUsageStatsTS {
  total_tokens?: number;
  total_invocations?: number;
  average_response_time_ms?: number;
}

// Version history entry
export interface AgentVersionHistoryTS {
  version: string;
  changes: string;
  updated_at: string;
}

// Metadata containing additional agent information
export interface AgentMetadataTS {
  tags?: string[];
  skills?: string[];
  capabilities?: string[];
  tips?: string[];
  usage?: AgentUsageStatsTS;
  version_history?: AgentVersionHistoryTS[];
}

// Represents the 'agent_details' JSONB column in Supabase, and the 'agent' field in AgentConfigTS.
export interface AgentObjectTS {
  name: string;
  description: string;
  system_prompt: string;
  avatar?: string | null;
  metadata?: AgentMetadataTS;
}

// Usage limits for AI models
export interface UsageLimitsTS {
  max_messages_per_window: number | null; // null means unlimited
  time_window_hours: number | null;       // null means unlimited
}

// Represents the 'ai_config' JSONB column in Supabase, and the 'ai_config' field in AgentConfigTS.
export interface AiConfigObjectTS {
  model_id?: string;
  provider_name?: string;
  base_url?: string | null;
  temperature?: number;
  max_tokens?: number;
  usage_limits?: UsageLimitsTS;
}

export interface ToolDefinitionTS {
  name: string;
  description?: string;
  input_schema?: any; // Consider a more specific type, e.g., JSONSchema7
  requires_human_approval_to_execute?: boolean;
}

export interface ToolGroupTS {
  name: string;
  group_type: 'CUSTOM' | 'ANTHROPIC';
  init_args?: Record<string, any> | null;
  tools: ToolDefinitionTS[];
}

// Primary UI/Store-facing type for an agent configuration.
// The AgentConfigService maps this to Supabase's agent_configs table structure.
export interface AgentConfigTS {
  id: string; // UUID
  user_id?: string | null; // Associated user
  version: string;
  agent: AgentObjectTS;         // Nested object for agent details
  ai_config: AiConfigObjectTS;  // Nested object for AI settings
  tool_groups: ToolGroupTS[] | null;
  created_at: string; // ISO 8601 timestamp string
  updated_at: string; // ISO 8601 timestamp string
  is_public: boolean; // Whether the agent is publicly available
  publisher?: string | null; // Name of the organization/entity that published the agent
  publisher_id?: string | null; // Reference to the user ID of the publisher
}

// --- Service Layer Data Transfer Objects (DTOs) ---
// These types define the shape of data expected by AgentConfigService functions
// when interacting directly with the Supabase 'agent_configs' table structure.

// Data shape for creating a new agent config directly matching DB schema.
// 'agent' from AgentConfigTS maps to 'agent_details', 'ai_config' maps to 'ai_config'.
export interface NewAgentConfigServicePayload {
  user_id?: string | null;
  version: string;
  agent_details: AgentObjectTS; // Maps to 'agent_details' DB column
  ai_config: AiConfigObjectTS;  // Maps to 'ai_config' DB column
  tool_groups: ToolGroupTS[] | null;
  is_public: boolean;
  publisher?: string | null;
  publisher_id?: string | null;
  // 'id' is generated by DB or service, 'created_at', 'updated_at' by DB.
}

// Data shape for updating an existing agent config, matching DB schema.
export type UpdateAgentConfigServicePayload = Partial<NewAgentConfigServicePayload>;


// --- Store Interaction Types ---
// These types are relevant for how the agentConfigStore prepares data.

// Data shape when the store wants to create a new agent configuration.
// The service will map 'agent' to 'agent_details' and 'ai_config' to 'ai_config'.
export type StoreNewAgentConfigData = Omit<AgentConfigTS, 'id' | 'created_at' | 'updated_at'>;

// Data shape when the store wants to update an existing agent configuration.
// The service will map 'agent' to 'agent_details' and 'ai_config' to 'ai_config'.
export type StoreUpdateAgentConfigData = Partial<Omit<AgentConfigTS, 'id' | 'created_at' | 'updated_at'>>;


// For the list of available tools that can be added to a configuration.
export interface AvailableToolDefinitionTS {
  name: string;
  description: string;
  input_schema: any; // Consider JSONSchema7
  group: string | null; // Optional grouping for UI display
}

// --- Usage Tracking Types ---

// Represents a row in the user_agent_usage table
export interface UserAgentUsageTS {
  id: string;
  user_id: string;
  agent_config_id: string;
  usage_window_start: string; // ISO timestamp
  message_count: number;
  last_updated: string; // ISO timestamp
}

// Response from quota checking function
export interface QuotaCheckResultTS {
  canSend: boolean;
  remainingQuota: number | null; // null if unlimited
  resetTime: string | null; // ISO timestamp, null if unlimited
  isUnlimited: boolean;
  currentUsage?: number;
  maxMessages?: number;
}

// Data for creating/updating usage records
export interface UpdateUsagePayloadTS {
  user_id: string;
  agent_config_id: string;
}
