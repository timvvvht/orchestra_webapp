const styles = `
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Mission Control Split Screen - Hide the original ChatHeader completely */
  .mission-control-split .chat-header {
    display: none !important;
  }
  
  /* Ensure proper height containment for chat interface */
  .mission-control-split {
    height: 100% !important;
    max-height: 100% !important;
  }
  
  /* Ensure scrollable areas don't exceed container */
  .mission-control-split .scroll-area,
  .mission-control-split [data-radix-scroll-area-viewport] {
    max-height: 100% !important;
  }
  
  /* Constrain the chat input area to reasonable height */
  .mission-control-split .chat-input-container,
  .mission-control-split .chat-input-wrapper,
  .mission-control-split textarea {
    max-height: 200px !important;
  }
  
  .mission-control-split textarea {
    min-height: 60px !important;
    resize: vertical !important;
  }
  
  /* Ensure proper horizontal containment for chat content */
  .mission-control-split {
    max-width: 100% !important;
    overflow-x: hidden !important;
  }
  
  /* Ensure chat messages and content are horizontally contained */
  .mission-control-split .scroll-area,
  .mission-control-split [data-radix-scroll-area-viewport] {
    max-width: 100% !important;
    overflow-x: hidden !important;
  }
  
  /* Ensure message content wraps properly in split view */
  .mission-control-split pre,
  .mission-control-split code {
    max-width: 100% !important;
    overflow-x: auto !important;
    word-wrap: break-word !important;
  }
  
  /* Ensure wide content like tables or code blocks are contained */
  .mission-control-split table,
  .mission-control-split .code-block,
  .mission-control-split .tool-result {
    max-width: 100% !important;
    overflow-x: auto !important;
  }


`;

// Inject styles
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style');
  styleSheet.textContent = styles;
  document.head.appendChild(styleSheet);
}

import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { createPortal } from 'react-dom';

// Simple Error Boundary for debugging
class ChatErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('ChatMainCanonicalLegacy Error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="flex items-center justify-center h-full bg-red-500/10 border border-red-500/20">
          <div className="text-center p-4">
            <p className="text-red-400 mb-2">Chat Component Error</p>
            <p className="text-white/60 text-sm">{this.state.error?.message}</p>
            <button
              onClick={() => this.setState({ hasError: false })}
              className="mt-2 px-3 py-1 bg-red-500/20 text-red-300 rounded text-xs"
            >
              Retry
            </button>
          </div>
        </div>
      );
    }


    return this.props.children;
  }
}

import { useNavigate } from 'react-router-dom';
import { Activity, ChevronRight, X, Sparkles, Plus, Clock, AlertCircle, Filter, Archive, ArchiveRestore, Eye, EyeOff, CheckCircle2, Loader2 } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

// Import timeline helpers for rich tool display names
import { getToolDisplayName } from '@/utils/timelineHelpers';

// Drafts integration
import { useDraftStore } from '@/stores/draftStore';
// import DraftCard from '@/components/drafts/DraftCard'; // Using custom design instead
import { NewDraftModal } from '@/components/drafts/NewDraftModal';
import { useStartSession } from '@/utils/startSession';

// Store imports
import { useSessionStatusStore } from '@/stores/sessionStatusStore';
import { usePendingToolsStore } from '@/stores/pendingToolsStore';

// Chat UI context for session management
import { useChatUI } from '@/context/ChatUIContext';

// Chat component import
import ChatMainCanonicalLegacy from '@/components/chat-interface/ChatMainCanonicalLegacy';
import ScrollTestComponent from '@/components/debug/ScrollTestComponent';

// Session ID context for providing session ID to child components
import { SessionIdContext } from '@/context/SessionIdContext';

// Debug: Let's also try a direct import to see if there's a path issue
// import ChatMainCanonicalLegacy from '../chat-interface/ChatMainCanonicalLegacy';

// Supabase
import { supabase } from '@/auth/SupabaseClient';
import { useAuth } from '@/auth/AuthContext';

// ACS Client for firehose access
import { getDefaultACSClient } from '@/services/acs';

// ACS integration for sending messages
import { useACSClient } from '@/hooks/acs-chat/useACSClient';
import { useBYOKStore } from '@/stores/byokStore';
import { createACSTemplateVariables } from '@/utils/templateVariables';
import { useSelections, getAcsOverrides } from '@/context/SelectionContext';
import { useEventStore } from '@/stores/eventStore';
import { toast } from 'sonner';
import { ChatRole } from '@/types/chatTypes';

// Mission Control data interface
interface MissionControlAgent {
  id: string;
  mission_title: string;
  status: string;
  last_message_at: string | null;
  created_at: string;
  agent_config_name: string | null;
  model_id: string | null;
  latest_message_id: string | null;
  latest_message_role: string | null;
  latest_message_content: any | null;
  latest_message_timestamp: string | null;
  agent_cwd: string | null;
  archived_at: string | null;
}

// Mission Control data hook - Snapshot-only mode (no realtime subscriptions)
const useMissionControlData = (statusFilter: 'active' | 'archived' = 'active') => {
  const { user } = useAuth();
  const [agents, setAgents] = useState<MissionControlAgent[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchData = useCallback(async () => {
    if (!user?.id) {
      setIsLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase.rpc('get_mission_control_data', {
        user_id_param: user.id,
        status_filter: statusFilter
      });

      if (error) {
        console.error('Mission Control data fetch error:', error);
        setError(error.message);
      } else if (data) {
        setAgents(data);
        setError(null);
      }
    } catch (err) {
      console.error('Mission Control fetch exception:', err);
      setError('Failed to fetch mission control data');
    } finally {
      setIsLoading(false);
    }
  }, [user?.id, statusFilter]);

  // ① Fetch snapshot exactly once (or when status filter changes)
  useEffect(() => {
    fetchData();
  }, [fetchData]); // Only re-fetch when user or statusFilter changes

  // ② Expose setAgents so SSE hook can mutate in-place
  return { agents, setAgents, isLoading, error, refetch: fetchData };
};

// Helper function to create human-readable tool summaries
const formatToolCallSummary = (toolCall: any): string => {
  const toolName = toolCall.name || toolCall.tool_name || 'Unknown Tool';
  const args = toolCall.arguments || toolCall.tool_args || {};
  
  switch (toolName) {
    case 'str_replace_editor':
      const command = args.command;
      const path = args.path;
      if (command === 'create') return `📝 Creating ${path}`;
      if (command === 'str_replace') return `✏️ Editing ${path}`;
      if (command === 'view') return `👀 Viewing ${path}`;
      return `📄 ${command} ${path}`;
    
    case 'execute_in_runner_session':
      const cmd = args.command;
      return `⚡ Running: ${cmd?.substring(0, 50)}${cmd?.length > 50 ? '...' : ''}`;
    
    case 'search_files':
      const pattern = args.pattern || args.content;
      return `🔍 Searching: ${pattern}`;
    
    case 'agentic_search_files_persistent':
      return `🔎 Smart search`;
    
    default:
      return `🔧 ${toolName}`;
  }
};

const formatToolResultSummary = (result: any): string => {
  if (result.success === false || result.error) {
    return '❌ Tool failed';
  }
  
  if (result.output) {
    const output = String(result.output);
    if (output.length > 100) {
      return `✅ ${output.substring(0, 100)}...`;
    }
    return `✅ ${output}`;
  }
  
  return '✅ Tool completed';
};

// Firehose Events Hook - handles SSE updates for agent list reordering
const useFirehoseEvents = ({ setAgents }: { setAgents: (fn: (prev: MissionControlAgent[]) => MissionControlAgent[]) => void }) => {
  const { user } = useAuth();

  useEffect(() => {
    if (!user) return;

    // Get the firehose service from the global ACS client
    const acsClient = getDefaultACSClient();

    if (!acsClient?.firehose) {
      console.warn('🔥 [useFirehoseEvents] No firehose service available');
      return;
    }

    const firehose = acsClient.firehose;

    // Subscribe to raw firehose events
    const unsubscribe = firehose.subscribe((rawEvent: any) => {
      // Fix: Extract from payload, not top level
      const { payload } = rawEvent;
      if (!payload) return;
      
      // Filter events for the current user (events should already be filtered by user connection)
      if (payload.data?.user_id && payload.data.user_id !== user.id) {
        return;
      }

      const { session_id: sessionId, event_type: eventType, data } = payload;

      // Apply delta updates to the agents state
      setAgents(prev =>
        prev
          .map(agent => {
            if (agent.id !== sessionId) return agent;

            // 🎯 FILTER: Only react to tool_call and done (session end) events
            switch (eventType) {
              case 'tool_call':
                // Show tool call in progress with rich display name
                const toolName = data.tool_call?.name || data.tool_name || data.tool_call?.tool_name || 'unknown';
                const displayName = getToolDisplayName(toolName);
                return {
                  ...agent,
                  latest_message_content: displayName,
                  latest_message_role: 'tool_call',
                  latest_message_timestamp: new Date().toISOString(),
                  last_message_at: new Date().toISOString(),
                  status: 'working' // Ensure working status for tool calls
                };

              case 'done':
                // Session completed - update status and show unread completion message
                return {
                  ...agent,
                  status: 'completed', // Special status to indicate completion with unread message
                  latest_message_content: 'Session completed',
                  latest_message_role: 'session_end',
                  latest_message_timestamp: new Date().toISOString(),
                  last_message_at: new Date().toISOString()
                };

              default:
                // 🚫 IGNORE: All other event types (agent_status, tool_result, chunk, etc.)
                return agent;
            }
          })
          // 🔄 RESORT right after mutation - most recent activity first
          .sort((a, b) =>
            (b.last_message_at ?? '').localeCompare(a.last_message_at ?? '')
          )
      );
    });

    return unsubscribe;
  }, [user, setAgents]);
};

// Archive/Unarchive functions
const useArchiveActions = () => {
  const { user } = useAuth();

  const archiveSession = useCallback(async (sessionId: string) => {
    if (!user?.id) return false;

    try {
      const { data, error } = await supabase.rpc('archive_session', {
        session_id_param: sessionId,
        user_id_param: user.id
      });

      if (error) {
        console.error('Archive session error:', error);
        toast.error('Failed to archive session');
        return false;
      }

      toast.success('Session archived');
      return true;
    } catch (err) {
      console.error('Archive session exception:', err);
      toast.error('Failed to archive session');
      return false;
    }
  }, [user?.id]);

  const unarchiveSession = useCallback(async (sessionId: string) => {
    if (!user?.id) return false;

    try {
      const { data, error } = await supabase.rpc('unarchive_session', {
        session_id_param: sessionId,
        user_id_param: user.id
      });

      if (error) {
        console.error('Unarchive session error:', error);
        toast.error('Failed to restore session');
        return false;
      }

      toast.success('Session restored');
      return true;
    } catch (err) {
      console.error('Unarchive session exception:', err);
      toast.error('Failed to restore session');
      return false;
    }
  }, [user?.id]);

  return { archiveSession, unarchiveSession };
};

// Helper functions (optimized for performance)
const getAgentStatus = (agent: MissionControlAgent) => {
  const realtimeStatus = useSessionStatusStore.getState().getStatus(agent.id);
  if (realtimeStatus && realtimeStatus !== 'idle') {
    return realtimeStatus;
  }

  const pendingJobs = usePendingToolsStore.getState().jobs;
  const hasPendingTools = Object.values(pendingJobs).some(job =>
    job.sse?.session_id === agent.id && job.status === 'waiting'
  );

  if (hasPendingTools) {
    return 'working';
  }

  return agent.status;
};

// Utility function to strip markdown and create clean preview text
const stripMarkdownForPreview = (text: string): string => {
  // Remove markdown formatting while preserving the text content
  return text
    // Remove headers (# ## ###)
    .replace(/^#{1,6}\s+/gm, '')
    // Remove bold/italic (**text** *text* __text__ _text_)
    .replace(/(\*\*|__)(.*?)\1/g, '$2')
    .replace(/(\*|_)(.*?)\1/g, '$2')
    // Remove inline code (`code`)
    .replace(/`([^`]+)`/g, '$1')
    // Remove links [text](url) -> text
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    // Remove images ![alt](url) -> alt
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '$1')
    // Remove code blocks (```code```)
    .replace(/```[\s\S]*?```/g, '[code block]')
    // Remove horizontal rules
    .replace(/^[-*_]{3,}$/gm, '')
    // Remove blockquotes (> text)
    .replace(/^>\s+/gm, '')
    // Remove list markers (- * + 1.)
    .replace(/^[\s]*[-*+]\s+/gm, '')
    .replace(/^[\s]*\d+\.\s+/gm, '')
    // Collapse multiple whitespace/newlines into single spaces
    .replace(/\s+/g, ' ')
    .trim();
};

const getLatestMessagePreview = (agent: MissionControlAgent, isInSplitScreen: boolean = false) => {
  if (!agent.latest_message_content) {
    return "No messages yet";
  }

  const content = agent.latest_message_content;
  const role = agent.latest_message_role;
  const maxLength = isInSplitScreen ? 80 : 300; // Much longer for full-screen mode

  // Handle new role types for enhanced UI
  if (role === 'tool_call') {
    return `🔧 ${content}`; // Show tool display name with icon
  }

  if (role === 'session_end') {
    return `✅ ${content}`; // Show session completion with checkmark
  }

  if (role === 'typing') {
    return `💬 ${content}`; // Show typing indicator with icon (won't be used due to filtering)
  }

  if (Array.isArray(content)) {
    const first = content[0];
    if (!first) return "No messages yet";

    switch (first.type) {
      case 'text':
        const cleanText = stripMarkdownForPreview(first.text);
        return cleanText.length > maxLength ? `${cleanText.substring(0, maxLength)}...` : cleanText;

      case 'code':
        return '💾 Code snippet';

      case 'image':
        return '🖼️ Image';

      case 'file':
        return `📄 ${first.fileName || 'File'}`;

      case 'tool_call':
        return `🔧 ${first.name || 'Tool call'}`;

      case 'tool_result':
        return '⚙️ Tool result';

      default:
        return 'New content';
    }
  }

  if (typeof content === 'string') {
    const cleanText = stripMarkdownForPreview(content);
    return cleanText.length > maxLength ? `${cleanText.substring(0, maxLength)}...` : cleanText;
  }

  return "Processing...";
};



const formatTimeAgo = (timestamp: string) => {
  const date = new Date(timestamp);
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffMins = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMins / 60);
  const diffDays = Math.floor(diffHours / 24);

  if (diffMins < 1) return 'now';
  if (diffMins < 60) return `${diffMins}m ago`;
  if (diffHours < 24) return `${diffHours}h ago`;
  if (diffDays < 7) return `${diffDays}d ago`;
  return date.toLocaleDateString();
};

// Format code path for display - show last 2-3 segments for context
const formatCodePath = (path: string | null): string => {
  if (!path) return 'No directory set';

  // Handle home directory
  const homePath = path.replace(/^~/, '').replace(/^\/home\/[^/]+/, '~');

  const segments = homePath.split('/').filter(Boolean);

  // If path is very short, show it all
  if (segments.length <= 3) {
    return homePath;
  }

  // Otherwise show last 2-3 segments with ellipsis
  const lastSegments = segments.slice(-2);
  return `.../${lastSegments.join('/')}`;
};

// Refined Status Dot - More subtle, less distracting
const StatusDot = React.memo(({ status, messageRole }: { status: string; messageRole?: string }) => {
  const getStatusConfig = () => {
    // Special handling for session end - unread completion message
    if (messageRole === 'session_end' || status === 'completed') {
      return { 
        color: 'bg-green-500', 
        glow: 'shadow-[0_0_6px_rgba(34,197,94,0.4)]', 
        pulse: true,
        unread: true 
      };
    }
    
    // Special handling for tool calls
    if (messageRole === 'tool_call') {
      return { color: 'bg-purple-500', glow: 'shadow-[0_0_4px_rgba(147,51,234,0.3)]', pulse: true };
    }

    // Special handling for typing state (keeping for reference, but won't be used due to filtering)
    if (messageRole === 'typing') {
      return { color: 'bg-blue-500', glow: 'shadow-[0_0_4px_rgba(59,130,246,0.3)]', pulse: true };
    }

    switch (status) {
      case 'working':
        return { color: 'bg-emerald-500', glow: 'shadow-[0_0_4px_rgba(16,185,129,0.3)]', pulse: true };
      case 'awaiting':
        return { color: 'bg-amber-500', glow: 'shadow-[0_0_4px_rgba(245,158,11,0.3)]', pulse: false };
      case 'error':
        return { color: 'bg-red-500', glow: 'shadow-[0_0_4px_rgba(239,68,68,0.3)]', pulse: false };
      case 'paused':
        return { color: 'bg-gray-500', glow: '', pulse: false };
      default:
        return { color: 'bg-gray-400', glow: '', pulse: false };
    }
  };

  const config = getStatusConfig();

  return (
    <div className="relative">
      {config.pulse && (
        <div className={`absolute inset-0 ${config.color} rounded-full animate-ping opacity-50`} />
      )}
      <div className={`w-2 h-2 ${config.color} ${config.glow} rounded-full relative transition-shadow duration-300`} />
      
      {/* Unread indicator for completed sessions */}
      {config.unread && (
        <div className="absolute -top-0.5 -right-0.5 w-1.5 h-1.5 bg-white rounded-full border border-black/20" />
      )}
    </div>
  );
});

// Refined Draft Card - Subtle borders, no competing gradients
const DraftCard: React.FC<{
  draft: any;
  onSend: () => void;
  onDelete: () => void;
}> = React.memo(({ draft, onSend, onDelete }) => {
  return (
    <div className="group relative mb-2">
      {/* Subtle border without gradient */}
      <div className="relative rounded-lg bg-white/[0.02] border border-white/[0.06] overflow-hidden group-hover:bg-white/[0.04] group-hover:border-white/[0.08] transition-[background-color,border-color] duration-150 will-change-[background-color,border-color]">
        <div className="px-4 py-3">
          <div className="flex items-start justify-between gap-3">
            <div className="flex-1 min-w-0">
              <p className="text-sm text-white/70 leading-relaxed line-clamp-2">
                {draft.content}
              </p>
              <div className="flex items-center gap-2 mt-1.5">
                <span className="text-xs text-white/30">
                  Draft
                </span>
                <span className="text-xs text-white/20">
                  {formatTimeAgo(draft.createdAt)}
                </span>
              </div>
            </div>

            {/* Actions - visible on hover */}
            <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-150">
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onSend();
                }}
                className="
                  px-2.5 py-1
                  text-xs font-medium
                  text-white/60 hover:text-white/80
                  bg-white/[0.08] hover:bg-white/[0.12]
                  rounded-md
                  transition-colors duration-150
                "
              >
                Send
              </button>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onDelete();
                }}
                className="
                  p-1
                  text-white/30 hover:text-white/50
                  hover:bg-white/10
                  rounded-md
                  transition-colors duration-150
                "
              >
                <X className="w-3.5 h-3.5" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
});

// Simplified Agent card for split-screen
interface AgentCardProps {
  agent: MissionControlAgent;
  onClick: () => void;
  isSelected: boolean;
  onArchive?: (sessionId: string) => void;
  onUnarchive?: (sessionId: string) => void;
  showArchived?: boolean;
  isInSplitScreen?: boolean;
}
// Enhanced Agent Card with color-coded glassmorphism
interface EnhancedAgentCardProps extends AgentCardProps {
  group: 'needs-review' | 'processing' | 'idle';
}

const EnhancedAgentCard: React.FC<EnhancedAgentCardProps> = React.memo(({
  agent,
  onClick,
  isSelected,
  onArchive,
  onUnarchive,
  showArchived = false,
  isInSplitScreen = false,
  group
}) => {
  // Memoize expensive computations
  const status = useMemo(() => getAgentStatus(agent), [agent.id, agent.status]);
  const messagePreview = useMemo(() => getLatestMessagePreview(agent, isInSplitScreen), [agent.latest_message_content, isInSplitScreen]);
  const timeAgo = useMemo(() => formatTimeAgo(agent.last_message_at || agent.created_at), [agent.last_message_at, agent.created_at]);
  const codePath = useMemo(() => formatCodePath(agent.agent_cwd), [agent.agent_cwd]);

  // Memoize click handlers
  const handleArchiveClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    onArchive?.(agent.id);
  }, [onArchive, agent.id]);

  const handleUnarchiveClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    onUnarchive?.(agent.id);
  }, [onUnarchive, agent.id]);

  // Subtle color-coded styles based on group
  const glowStyles = {
    'needs-review': 'bg-white/[0.03] border-orange-500/10 hover:border-orange-500/20',
    'processing': 'bg-white/[0.03] border-blue-500/10 hover:border-blue-500/20',
    'idle': 'bg-white/[0.02] border-white/10 hover:border-white/20'
  };

  const iconStyles = {
    'needs-review': <CheckCircle2 className="w-3.5 h-3.5 text-orange-500/50" />,
    'processing': <Loader2 className="w-3.5 h-3.5 text-blue-500/50 animate-spin" />,
    'idle': <Clock className="w-3.5 h-3.5 text-white/30" />
  };

  return (
    <div
      onClick={onClick}
      className="group relative cursor-pointer mb-3"
    >
      <div className={`
        relative rounded-xl border backdrop-blur-md transition-all duration-200
        hover:translate-y-[-1px]
        ${glowStyles[group]}
        ${isSelected && "ring-1 ring-white/20 shadow-lg"}
      `}>
        {/* Very subtle animated glow for active states */}
        {group === 'processing' && (
          <div className="absolute inset-0 rounded-xl bg-blue-500/[0.02] animate-pulse" />
        )}
        
        <div className={`relative px-4 ${isInSplitScreen ? 'py-3.5' : 'py-4'}`}>
          <div className="flex items-start gap-3">
            {/* Status icon instead of dot */}
            <div className="mt-0.5">
              {iconStyles[group]}
            </div>

            {/* Content */}
            <div className="flex-1 min-w-0">
              {/* Title and time */}
              <div className="flex items-baseline justify-between gap-2 mb-1">
                <h3 className="text-base font-medium text-white/90 leading-tight">
                  {agent.mission_title}
                </h3>
                <span className="text-xs tabular-nums flex-shrink-0 text-white/30">
                  {timeAgo}
                </span>
              </div>

              {/* Code path */}
              <div className="text-xs text-white/40 font-mono mb-1.5 truncate">
                {codePath}
              </div>

              {/* Message preview */}
              <p className={`text-sm text-white/60 leading-relaxed ${isInSplitScreen ? 'line-clamp-1' : 'line-clamp-2'}`}>
                {messagePreview}
              </p>
            </div>

            {/* Archive/Unarchive Actions */}
            <div className={`
              absolute right-4 top-1/2 -translate-y-1/2
              opacity-0 group-hover:opacity-100
              transition-opacity duration-150
              flex items-center gap-1
            `}>
              {showArchived ? (
                <button
                  onClick={handleUnarchiveClick}
                  className="
                    p-1.5
                    text-white/40 hover:text-emerald-400
                    hover:bg-emerald-500/10
                    rounded-md
                    transition-colors duration-150
                  "
                  title="Restore session"
                >
                  <ArchiveRestore className="w-3.5 h-3.5" />
                </button>
              ) : (
                <button
                  onClick={handleArchiveClick}
                  className="
                    p-1.5
                    text-white/40 hover:text-amber-400
                    hover:bg-amber-500/10
                    rounded-md
                    transition-colors duration-150
                  "
                  title="Archive session"
                >
                  <Archive className="w-3.5 h-3.5" />
                </button>
              )}
              <ChevronRight className={`w-4 h-4 ml-1 transition-transform ${
                isSelected ? 'rotate-90 text-white/40' : 'text-white/20'
              }`} />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
});
// Main Mission Control component
const MissionControlSplitScreen: React.FC = () => {
  const navigate = useNavigate();
  const [selectedSession, setSelectedSession] = useState<string | null>(null);
  const [visibleSessionCount, setVisibleSessionCount] = useState(10);
  const [showScrollTest, setShowScrollTest] = useState(false);
  const [showNewDraftModal, setShowNewDraftModal] = useState(false);
  const [viewMode, setViewMode] = useState<'active' | 'archived'>('active');
  const { agents, setAgents, isLoading, error, refetch } = useMissionControlData(viewMode);
  const { archiveSession, unarchiveSession } = useArchiveActions();
  
  // Group agents by their status
  const groupedAgents = useMemo(() => {
    const groups = {
      needsReview: [] as MissionControlAgent[],
      processing: [] as MissionControlAgent[],
      idle: [] as MissionControlAgent[]
    };

    agents.forEach(agent => {
      const status = getAgentStatus(agent);
      
      // Terminal states that need human review
      if (status === 'completed' || status === 'error' || 
          agent.latest_message_role === 'session_end' ||
          (status === 'idle' && agent.latest_message_role === 'assistant' && agent.latest_message_content)) {
        groups.needsReview.push(agent);
      } 
      // Active processing states
      else if (status === 'working' || status === 'awaiting' || 
               agent.latest_message_role === 'tool_call') {
        groups.processing.push(agent);
      } 
      // Everything else is idle/initialized
      else {
        groups.idle.push(agent);
      }
    });

    // Sort by urgency - oldest waiting first for review, newest activity first for processing
    groups.needsReview.sort((a, b) => 
      new Date(a.last_message_at || a.created_at).getTime() - 
      new Date(b.last_message_at || b.created_at).getTime()
    );
    groups.processing.sort((a, b) => 
      new Date(b.last_message_at || b.created_at).getTime() - 
      new Date(a.last_message_at || a.created_at).getTime()
    );

    return groups;
  }, [agents]);
  
  // ③ Hook up firehose events for real-time updates
  useFirehoseEvents({ setAgents });

  // CWD filter
  const [selectedCwd, setSelectedCwd] = useState<string | null>(null);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLButtonElement>(null);
  const dropdownMenuRef = useRef<HTMLDivElement>(null);
  const [dropdownPosition, setDropdownPosition] = useState<{ top: number; left: number } | null>(null);

  const uniqueCwds = useMemo(
    () => [...new Set(agents.map((a) => a.agent_cwd).filter(Boolean))],
    [agents]
  );

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node) &&
        dropdownMenuRef.current &&
        !dropdownMenuRef.current.contains(event.target as Node)
      ) {
        setIsDropdownOpen(false);
      }
    };

    if (isDropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [isDropdownOpen]);

  const handleToggleDropdown = () => {
    if (!isDropdownOpen) {
      const rect = dropdownRef.current?.getBoundingClientRect();
      if (rect) {
        setDropdownPosition({
          top: rect.bottom + window.scrollY + 8, // Approximate mt-2 (0.5rem ~ 8px)
          left: rect.left + window.scrollX,
        });
      }
    }
    setIsDropdownOpen((prev) => !prev);
  };

  // Drafts integration
  const { getDraftsArray, removeDraft } = useDraftStore();
  const startSession = useStartSession();
  const drafts = getDraftsArray();

  // Removed debug logging for better performance

  const visibleAgents = useMemo(
    () => agents.filter((a) => !selectedCwd || a.agent_cwd === selectedCwd).slice(0, visibleSessionCount),
    [agents, selectedCwd, visibleSessionCount]
  );
  const hasMoreAgents = useMemo(
    () => agents.filter((a) => !selectedCwd || a.agent_cwd === selectedCwd).length > visibleSessionCount,
    [agents, selectedCwd, visibleSessionCount]
  );

  // Memoized draft handlers to prevent unnecessary re-renders
  const handleSendDraft = useCallback(async (draft: any) => {
    try {
      await startSession({
        initialMessage: draft.content,
        agentConfigId: draft.agentConfigId,
        codePath: draft.codePath,
        modelId: draft.modelId || undefined,
        sessionName: `Issue: ${draft.content.substring(0, 30)}...`,
      });
      removeDraft(draft.id);
    } catch (error) {
      console.error('[MissionControl] Failed to send draft:', error);
    }
  }, [startSession, removeDraft]);

  const handleDeleteDraft = useCallback((draftId: string) => {
    removeDraft(draftId);
  }, [removeDraft]);

  // Memoized archive handlers to prevent unnecessary re-renders
  const handleArchiveSession = useCallback(async (sessionId: string) => {
    const success = await archiveSession(sessionId);
    if (success) {
      refetch();
      // Close session if it was selected
      if (selectedSession === sessionId) {
        setSelectedSession(null);
      }
    }
  }, [archiveSession, refetch, selectedSession]);

  const handleUnarchiveSession = useCallback(async (sessionId: string) => {
    const success = await unarchiveSession(sessionId);
    if (success) {
      refetch();
    }
  }, [unarchiveSession, refetch]);

  // Memoized session selection handler
  const handleSessionSelect = useCallback((sessionId: string) => {
    setSelectedSession(sessionId);
    
    // Clear unread status when user views a completed session
    setAgents(prev => prev.map(agent => {
      if (agent.id === sessionId && agent.status === 'completed') {
        return {
          ...agent,
          status: 'idle' // Clear the completed/unread status
        };
      }
      return agent;
    }));
  }, [setAgents]);

  // Removed debug logging for better performance

  return (
    <div className="h-full max-h-full bg-black flex overflow-hidden w-full">
      {/* Subtle background - no competing gradients */}
      <div className="fixed inset-0 bg-gradient-to-br from-gray-950 via-black to-gray-950" />
      <div className="fixed inset-0">
        {/* Very subtle floating orbs */}
        <div
          className="absolute top-0 left-1/4 w-96 h-96 bg-white/[0.02] rounded-full blur-3xl"
          style={{ animation: 'float 30s ease-in-out infinite' }}
        />
        <div
          className="absolute bottom-0 right-1/4 w-96 h-96 bg-white/[0.02] rounded-full blur-3xl"
          style={{ animation: 'float 35s ease-in-out infinite reverse' }}
        />
      </div>

      {/* Left Panel - Mission Control Overview */}
      <div className={`relative z-10 transition-[width] duration-300 ${selectedSession ? 'w-[480px]' : 'w-full'} flex flex-col h-full overflow-hidden`}>
        {/* Content wrapper - full height always */}
        <div className="h-full flex flex-col w-full">
          {/* Refined Header - Clean, minimal */}
          <div className="flex-shrink-0 border-b border-white/[0.06] bg-black/50 backdrop-blur-sm">
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-baseline gap-3">
                  <h1 className="text-base font-semibold text-white/90">
                    Mission Control
                  </h1>
                  {/* Status Overview */}
                  {!isLoading && viewMode === 'active' && (
                    <div className="flex items-center gap-3 text-xs">
                      {groupedAgents.needsReview.length > 0 && (
                        <span className="flex items-center gap-1.5">
                          <div className="w-1.5 h-1.5 rounded-full bg-orange-500/50" />
                          <span className="text-white/40">{groupedAgents.needsReview.length} need review</span>
                        </span>
                      )}
                      {groupedAgents.processing.length > 0 && (
                        <span className="flex items-center gap-1.5">
                          <div className="w-1.5 h-1.5 rounded-full bg-blue-500/50 animate-pulse" />
                          <span className="text-white/40">{groupedAgents.processing.length} processing</span>
                        </span>
                      )}
                      {drafts.length > 0 && (
                        <span className="text-white/40">
                          · {drafts.length} drafts
                        </span>
                      )}
                    </div>
                  )}
                  {!isLoading && viewMode === 'archived' && (
                    <span className="text-xs text-white/40">
                      {agents.length} archived
                    </span>
                  )}

                  {/* View Mode Toggle */}
                  <div className="flex items-center bg-white/[0.03] rounded-md p-0.5">
                    <button
                      onClick={() => setViewMode('active')}
                      className={`
                        px-2 py-1 text-xs font-medium rounded-sm transition-[background-color,color] duration-150
                        ${viewMode === 'active'
                          ? 'bg-white/10 text-white/90'
                          : 'text-white/50 hover:text-white/70'
                        }
                      `}
                    >
                      Active
                    </button>
                    <button
                      onClick={() => setViewMode('archived')}
                      className={`
                        px-2 py-1 text-xs font-medium rounded-sm transition-[background-color,color] duration-150 flex items-center gap-1
                        ${viewMode === 'archived'
                          ? 'bg-white/10 text-white/90'
                          : 'text-white/50 hover:text-white/70'
                        }
                      `}
                    >
                      <Archive className="w-3 h-3" />
                      Archived
                    </button>
                  </div>
                </div>

                <div className="flex items-center gap-1">
                  {/* CTA Button - White-ish as requested */}
                  <button
                    onClick={() => setShowNewDraftModal(true)}
                    className="
                      group relative
                      px-3 py-1.5
                      text-xs font-medium text-black
                      bg-white/90 hover:bg-white
                      rounded-md
                      transition-all duration-150
                      flex items-center gap-1.5
                      shadow-sm
                    "
                  >
                    <Plus className="w-3.5 h-3.5" />
                    <span>New Task</span>
                    <kbd className="text-[10px] text-black/40 bg-black/10 px-1 py-0.5 rounded ml-1 opacity-0 group-hover:opacity-100 transition-opacity duration-150">
                      N
                    </kbd>
                  </button>

                  {selectedSession && (
                    <button
                      onClick={() => setSelectedSession(null)}
                      className="
                        p-1.5
                        text-white/50 hover:text-white/70
                        hover:bg-white/10
                        rounded-md
                        transition-all duration-150
                      "
                      title="Close split view (Esc)"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  )}
                </div>
              </div>

              {/* Directory Filter - Refined, now portaled */}
              {uniqueCwds.length > 0 && (
                <div className="mt-3" style={{ zIndex: 9999 }}>
                  <button
                    ref={dropdownRef}
                    onClick={handleToggleDropdown}
                    className="group relative flex items-center gap-1.5 px-3 py-1.5 text-sm font-light text-white/70 hover:text-white/90 focus:outline-none transition-all duration-200"
                  >
                    {/* Subtle background on hover */}
                    <div className="absolute inset-0 bg-white/5 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity" />
                    {/* Directory icon - simplified */}
                    <div className="relative w-4 h-4 rounded bg-white/10 flex items-center justify-center">
                      <div className="w-2 h-2 rounded-sm bg-white/60" />
                    </div>
                    <span className="relative text-xs">
                      {selectedCwd ? formatCodePath(selectedCwd) : 'All directories'}
                    </span>
                    {/* Chevron with smooth rotation */}
                    <svg
                      className={`relative w-3 h-3 transition-all duration-300 ${isDropdownOpen ? 'rotate-180 text-white/90' : 'text-white/50'}`}
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      strokeWidth={2.5}
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                  {/* Dropdown Panel - Portaled to body for isolation from parent styles */}
                  {isDropdownOpen && dropdownPosition && createPortal(
                    <AnimatePresence>
                      <motion.div
                        ref={dropdownMenuRef}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.2 }}
                        className="fixed z-[9999]"
                        style={{
                          top: `${dropdownPosition.top}px`,
                          left: `${dropdownPosition.left}px`,
                          minWidth: '240px',
                        }}
                      >
                        {/* Simplified dropdown without gradient border */}
                        <div className="relative">
                          {/* Main dropdown content - completely solid background */}
                          <div
                            className="rounded-xl py-2 shadow-2xl border border-white/10"
                            style={{
                              backgroundColor: '#030712',
                              backdropFilter: 'none',
                              WebkitBackdropFilter: 'none',
                            }}
                          >
                            {/* Header */}
                            <div className="px-4 py-2 border-b border-white/10">
                              <p className="text-xs font-medium text-white/60 uppercase tracking-wider">Filter by Directory</p>
                            </div>
                            {/* Options */}
                            <div className="py-1 max-h-[200px] overflow-y-auto">
                              {/* All directories option */}
                              <button
                                onClick={() => {
                                  setSelectedCwd(null);
                                  setIsDropdownOpen(false);
                                }}
                                className={`w-full text-left px-4 py-2.5 text-sm transition-all duration-150 relative group/item ${!selectedCwd
                                  ? 'text-white bg-white/10'
                                  : 'text-white/80 hover:text-white hover:bg-white/10'
                                  }`}
                              >
                                <div className="flex items-center justify-between gap-3">
                                  <span className="block truncate">All directories</span>
                                  {!selectedCwd && (
                                    <svg className="w-4 h-4 text-blue-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M5 13l4 4L19 7" />
                                    </svg>
                                  )}
                                </div>
                                <div className="absolute left-0 top-0 bottom-0 w-0.5 bg-white/20 opacity-0 group-hover/item:opacity-100 transition-opacity" />
                              </button>
                              {/* Directory options */}
                              {uniqueCwds.map((cwd) => (
                                <button
                                  key={cwd}
                                  onClick={() => {
                                    setSelectedCwd(cwd);
                                    setIsDropdownOpen(false);
                                  }}
                                  className={`w-full text-left px-4 py-2.5 text-sm transition-all duration-150 relative group/item ${selectedCwd === cwd
                                    ? 'text-white bg-white/10'
                                    : 'text-white/80 hover:text-white hover:bg-white/10'
                                    }`}
                                >
                                  <div className="flex items-center justify-between gap-3">
                                    <span className="block truncate font-mono text-xs">{formatCodePath(cwd)}</span>
                                    {selectedCwd === cwd && (
                                      <svg className="w-4 h-4 text-blue-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2.5} d="M5 13l4 4L19 7" />
                                      </svg>
                                    )}
                                  </div>
                                  <div className="absolute left-0 top-0 bottom-0 w-0.5 bg-white/20 opacity-0 group-hover/item:opacity-100 transition-opacity" />
                                </button>
                              ))}
                            </div>
                            {/* Footer tip */}
                            <div className="px-4 py-2 border-t border-white/10">
                              <p className="text-xs text-white/50">Filter sessions by working directory</p>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    </AnimatePresence>,
                    document.body
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Content Area - Refined spacing and sections */}
          <div className="flex-1 overflow-y-auto min-h-0">
            <div className="min-h-[400px]">
              <div className="py-4">
                {isLoading ? (
                  <div className="flex items-center justify-center py-20">
                    <div className="flex items-center gap-1">
                      {[0, 1, 2].map(i => (
                        <div
                          key={i}
                          className="w-1 h-1 rounded-full bg-white/40 animate-pulse"
                          style={{ animationDelay: `${i * 150}ms` }}
                        />
                      ))}
                    </div>
                  </div>
                ) : error ? (
                  <div className="text-center py-20">
                    <div className="text-red-400 mb-4">{error}</div>
                    <button
                      onClick={() => window.location.reload()}
                      className="
                    px-4 py-2
                    bg-white/10
                    hover:bg-white/20
                    text-white/70
                    rounded-lg
                    font-normal
                    transition-all duration-200
                    border border-white/10
                    hover:border-white/20
                  "
                    >
                      Retry
                    </button>
                  </div>
                ) : visibleAgents.length === 0 && (viewMode === 'archived' || drafts.length === 0) ? (
                  <div className="flex flex-col items-center justify-center py-20 px-6">
                    <div className="text-center max-w-sm">
                      <h2 className="text-sm font-medium text-white/60 mb-1">
                        {viewMode === 'archived' ? 'No archived sessions' : 'No active sessions'}
                      </h2>
                      <p className="text-xs text-white/40">
                        {viewMode === 'archived'
                          ? 'Sessions you archive will appear here'
                          : 'Start a new conversation or create a draft to get started'
                        }
                      </p>
                    </div>
                  </div>
                ) : (
                  <>
                    {/* Drafts Section */}
                    {drafts.length > 0 && (
                      <div className="mb-4">
                        <div className="px-6 py-2">
                          <h3 className="text-sm font-medium text-white/50">
                            Drafts
                          </h3>
                        </div>
                        <div className="px-6">
                          {drafts.map(draft => (
                            <DraftCard
                              key={draft.id}
                              draft={draft}
                              onSend={() => handleSendDraft(draft)}
                              onDelete={() => handleDeleteDraft(draft.id)}
                            />
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Needs Review Section - Most Important */}
                    {groupedAgents.needsReview.length > 0 && viewMode === 'active' && (
                      <div className="mb-6">
                        <div className="px-6 py-2 flex items-center gap-2">
                          <AlertCircle className="w-3.5 h-3.5 text-white/50" />
                          <h3 className="text-xs font-medium text-white/50 uppercase tracking-wider">
                            Needs Review
                          </h3>
                          <span className="text-xs text-white/30">
                            ({groupedAgents.needsReview.length})
                          </span>
                        </div>
                        <div className="px-6">
                          {groupedAgents.needsReview
                            .filter(a => !selectedCwd || a.agent_cwd === selectedCwd)
                            .slice(0, visibleSessionCount)
                            .map(agent => (
                              <EnhancedAgentCard
                                key={agent.id}
                                agent={agent}
                                onClick={() => handleSessionSelect(agent.id)}
                                isSelected={selectedSession === agent.id}
                                onArchive={handleArchiveSession}
                                onUnarchive={handleUnarchiveSession}
                                showArchived={false}
                                isInSplitScreen={!!selectedSession}
                                group="needs-review"
                              />
                            ))}
                        </div>
                      </div>
                    )}

                    {/* Visual Separator */}
                    {groupedAgents.needsReview.length > 0 && groupedAgents.processing.length > 0 && viewMode === 'active' && (
                      <div className="mx-6 my-4 border-t border-white/5" />
                    )}

                    {/* Processing Section */}
                    {groupedAgents.processing.length > 0 && viewMode === 'active' && (
                      <div className="mb-6">
                        <div className="px-6 py-2 flex items-center gap-2">
                          <Loader2 className="w-3.5 h-3.5 text-white/50 animate-spin" />
                          <h3 className="text-xs font-medium text-white/50 uppercase tracking-wider">
                            Processing
                          </h3>
                          <span className="text-xs text-white/30">
                            ({groupedAgents.processing.length})
                          </span>
                        </div>
                        <div className="px-6">
                          {groupedAgents.processing
                            .filter(a => !selectedCwd || a.agent_cwd === selectedCwd)
                            .slice(0, visibleSessionCount)
                            .map(agent => (
                              <EnhancedAgentCard
                                key={agent.id}
                                agent={agent}
                                onClick={() => handleSessionSelect(agent.id)}
                                isSelected={selectedSession === agent.id}
                                onArchive={handleArchiveSession}
                                onUnarchive={handleUnarchiveSession}
                                showArchived={false}
                                isInSplitScreen={!!selectedSession}
                                group="processing"
                              />
                            ))}
                        </div>
                      </div>
                    )}

                    {/* Idle Section */}
                    {groupedAgents.idle.length > 0 && viewMode === 'active' && (
                      <div className="mb-6">
                        <div className="px-6 py-2 flex items-center gap-2">
                          <Clock className="w-3.5 h-3.5 text-white/30" />
                          <h3 className="text-xs font-medium text-white/50 uppercase tracking-wider">
                            Idle
                          </h3>
                          <span className="text-xs text-white/30">
                            ({groupedAgents.idle.length})
                          </span>
                        </div>
                        <div className="px-6">
                          {groupedAgents.idle
                            .filter(a => !selectedCwd || a.agent_cwd === selectedCwd)
                            .slice(0, visibleSessionCount)
                            .map(agent => (
                              <EnhancedAgentCard
                                key={agent.id}
                                agent={agent}
                                onClick={() => handleSessionSelect(agent.id)}
                                isSelected={selectedSession === agent.id}
                                onArchive={handleArchiveSession}
                                onUnarchive={handleUnarchiveSession}
                                showArchived={false}
                                isInSplitScreen={!!selectedSession}
                                group="idle"
                              />
                            ))}
                        </div>
                      </div>
                    )}

                    {/* Archived Sessions */}
                    {viewMode === 'archived' && visibleAgents.length > 0 && (
                      <div>
                        <div className="px-6 py-2">
                          <h3 className="text-sm font-medium text-white/50">
                            Archived Sessions
                          </h3>
                        </div>
                        <div className="px-6">
                          {visibleAgents.map(agent => (
                            <EnhancedAgentCard
                              key={agent.id}
                              agent={agent}
                              onClick={() => handleSessionSelect(agent.id)}
                              isSelected={selectedSession === agent.id}
                              onArchive={handleArchiveSession}
                              onUnarchive={handleUnarchiveSession}
                              showArchived={true}
                              isInSplitScreen={!!selectedSession}
                              group="idle"
                            />
                          ))}
                        </div>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Right Panel - Chat View - Only render when session is selected */}
      {selectedSession && (
        <div
          className="
            mission-control-split
            flex-1 h-screen max-h-screen
            bg-black/95 backdrop-blur-2xl
            border-l border-white/10
            flex flex-col
            overflow-hidden
          "
        >
          {/* Refined Chat Header - Minimal */}
          <div className="flex-shrink-0 border-b border-white/[0.06] bg-black/50 backdrop-blur-sm">
            <div className="flex items-center justify-between px-6 py-3.5">
              <div className="flex items-center gap-3">
                <StatusDot 
                  status={getAgentStatus(agents.find(a => a.id === selectedSession) || {} as any)} 
                  messageRole={agents.find(a => a.id === selectedSession)?.latest_message_role} 
                />
                <span className="text-sm font-medium text-white/80">
                  {agents.find(a => a.id === selectedSession)?.mission_title || 'Loading...'}
                </span>
              </div>

              <div className="flex items-center gap-2">
                <button
                  onClick={() => navigate(`/chat/${selectedSession}`)}
                  className="
                      px-3 py-1.5
                      text-xs font-medium text-white/60
                      bg-white/[0.05] hover:bg-white/[0.08]
                      border border-white/10 hover:border-white/20
                      rounded-md
                      transition-all duration-150
                    "
                >
                  Open Full View
                </button>
              </div>
            </div>
          </div>

          {/* Chat Content - Height-constrained container */}
          <div className="flex-1 h-full">
            {selectedSession && selectedSession.trim() !== '' ? (
              <ChatErrorBoundary>
                <div className="h-full max-h-full overflow-hidden">
                  {showScrollTest ? (
                    <ScrollTestComponent />
                  ) : (
                    <SessionIdContext.Provider value={selectedSession}>
                      <ChatMainCanonicalLegacy
                        sessionId={selectedSession}
                        sidebarCollapsed={true}
                        renderContext="mission-control"
                      />
                    </SessionIdContext.Provider>
                  )}
                </div>
              </ChatErrorBoundary>
            ) : (
              <div className="flex items-center justify-center h-full">
                <p className="text-white/50">
                  {selectedSession === null ? 'Select an agent to view chat' : 'Invalid session ID'}
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* New Draft Modal */}
      {showNewDraftModal && (
        <NewDraftModal onClose={() => setShowNewDraftModal(false)} />
      )}

      {/* CSS animations */}
      <style jsx>{`
        @keyframes float {
          0%, 100% { transform: translate(0, 0) scale(1); }
          33% { transform: translate(30px, -30px) scale(1.1); }
          66% { transform: translate(-20px, 20px) scale(0.9); }
        }
      `}</style>
    </div>
  );
};

export default MissionControlSplitScreen;