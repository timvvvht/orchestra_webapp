import React, { useEffect, useRef, useCallback } from 'react';
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';

interface CosmicTypingIndicatorProps {
  className?: string;
  agentName?: string;
  showThinkingState?: boolean;
}

const CosmicTypingIndicator: React.FC<CosmicTypingIndicatorProps> = ({ 
  className, 
  agentName,
  showThinkingState = false 
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const animationRef = useRef<number>();
  const particlesRef = useRef<Particle[]>([]);

  // Optimized Particle class with better performance
  class Particle {
    x: number;
    y: number;
    vx: number;
    vy: number;
    radius: number;
    color: string;
    life: number;
    maxLife: number;
    alpha: number;

    constructor(x: number, y: number) {
      this.x = x;
      this.y = y;
      this.vx = (Math.random() - 0.5) * 0.3; // Reduced velocity for smoother animation
      this.vy = (Math.random() - 0.5) * 0.3;
      this.radius = Math.random() * 2 + 1; // Smaller particles for better performance
      this.life = 0;
      this.maxLife = Math.random() * 80 + 60; // Shorter lifespan
      this.alpha = 0;
      
      const colors = showThinkingState 
        ? ['#e0aaff', '#c77dff', '#9d4edd', '#7209b7']
        : ['#667eea', '#764ba2', '#4facfe', '#00f2fe'];
      this.color = colors[Math.floor(Math.random() * colors.length)];
    }

    update() {
      this.x += this.vx;
      this.y += this.vy;
      this.life++;
      
      // Smoother alpha transition
      if (this.life < 10) {
        this.alpha = this.life / 10;
      } else if (this.life > this.maxLife - 10) {
        this.alpha = (this.maxLife - this.life) / 10;
      } else {
        this.alpha = 0.6;
      }
      
      // Gentle damping
      this.vx *= 0.995;
      this.vy *= 0.995;
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.globalAlpha = this.alpha;
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.fill();
    }

    isDead() {
      return this.life >= this.maxLife;
    }
  }

  // Optimized animation loop with performance controls
  const animate = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Clear with fade effect for trails
    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const particles = particlesRef.current;

    // Limit particle count for performance
    const maxParticles = showThinkingState ? 15 : 10;
    if (particles.length < maxParticles) {
      particles.push(new Particle(centerX, centerY));
    }

    // Update and draw particles
    for (let i = particles.length - 1; i >= 0; i--) {
      const particle = particles[i];
      particle.update();
      particle.draw(ctx);

      if (particle.isDead()) {
        particles.splice(i, 1);
      }
    }

    // Draw cosmic orbs with optimized rendering
    const time = Date.now() * 0.001;
    const orbCount = showThinkingState ? 4 : 3;
    
    for (let i = 0; i < orbCount; i++) {
      const angle = (i / orbCount) * Math.PI * 2 + time * 0.5;
      const radius = showThinkingState ? 18 : 12;
      const x = centerX + Math.cos(angle) * radius * Math.sin(time * 0.3);
      const y = centerY + Math.sin(angle * 1.5) * radius * 0.4;
      
      ctx.globalAlpha = 0.7 + Math.sin(time * 2 + i) * 0.2;
      
      // Simplified gradient for better performance
      const gradient = ctx.createRadialGradient(x, y, 0, x, y, 4);
      gradient.addColorStop(0, i % 2 ? '#667eea' : '#4facfe');
      gradient.addColorStop(1, 'rgba(102, 126, 234, 0)');
      
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(x, y, 2 + Math.sin(time * 3 + i) * 1, 0, Math.PI * 2);
      ctx.fill();
    }

    animationRef.current = requestAnimationFrame(animate);
  }, [showThinkingState]);

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    // Set canvas size with device pixel ratio for crisp rendering
    const dpr = window.devicePixelRatio || 1;
    const rect = canvas.getBoundingClientRect();
    
    canvas.width = rect.width * dpr;
    canvas.height = rect.height * dpr;
    
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.scale(dpr, dpr);
      // Enable better rendering
      ctx.imageSmoothingEnabled = true;
    }

    // Clear particles when switching states
    particlesRef.current = [];
    
    // Start animation
    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      particlesRef.current = [];
    };
  }, [animate, showThinkingState]);

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ duration: 0.5 }}
      className={cn("flex items-center gap-3", className)}
    >
      {/* Avatar placeholder */}
      <div className="w-8 h-8 rounded-full bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-xl border border-white/10" />
      
      {/* Optimized cosmic animation container */}
      <div className="flex flex-col gap-2">
        <div className={cn(
          "inline-flex items-center",
          "bg-black/50 backdrop-blur-2xl backdrop-saturate-200",
          "border border-white/[0.04]",
          "rounded-[20px] rounded-bl-[8px]",
          "shadow-[0_8px_32px_rgba(0,0,0,0.08)]",
          "overflow-hidden relative"
        )}>
          {/* Optimized canvas with performance improvements */}
          <canvas
            ref={canvasRef}
            className="block"
            style={{ 
              width: 180, 
              height: 50,
              // GPU acceleration for smooth animation
              willChange: 'transform',
              transform: 'translateZ(0)'
            }}
          />
          
          {/* Subtle background glow */}
          <div className={cn(
            "absolute inset-0 rounded-[20px] opacity-20 pointer-events-none",
            showThinkingState 
              ? "bg-gradient-to-r from-purple-500/10 to-pink-500/10" 
              : "bg-gradient-to-r from-blue-500/10 to-cyan-500/10"
          )} />
        </div>
        
        {/* Status text */}
        {agentName && (
          <motion.span
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="text-xs text-white/30 ml-3"
          >
            {showThinkingState ? `${agentName} is thinking...` : `${agentName} is typing...`}
          </motion.span>
        )}
      </div>
    </motion.div>
  );
};

export default CosmicTypingIndicator;